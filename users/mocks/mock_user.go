// Code generated by MockGen. DO NOT EDIT.
// Source: 2019_2_default_team/users (interfaces: UseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "2019_2_default_team/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockUseCase) GetUser(arg0 context.Context, arg1 *models.RequestProfile, arg2 bool, arg3 uint) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUseCaseMockRecorder) GetUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUseCase)(nil).GetUser), arg0, arg1, arg2, arg3)
}

// PostUser mocks base method
func (m *MockUseCase) PostUser(arg0 context.Context, arg1 *models.RegisterProfile) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUser", arg0, arg1)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostUser indicates an expected call of PostUser
func (mr *MockUseCaseMockRecorder) PostUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUser", reflect.TypeOf((*MockUseCase)(nil).PostUser), arg0, arg1)
}

// PutUser mocks base method
func (m *MockUseCase) PutUser(arg0 context.Context, arg1 uint, arg2 *models.RegisterProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutUser indicates an expected call of PutUser
func (mr *MockUseCaseMockRecorder) PutUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUser", reflect.TypeOf((*MockUseCase)(nil).PutUser), arg0, arg1, arg2)
}
