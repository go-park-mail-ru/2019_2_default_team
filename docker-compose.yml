#version: "3"
#services:
#
#  api-service:
#    image: deadmolesstudio/ketnipz-api-service
#    container_name: dmstudio-server
#    volumes:
#      - /opt/dmstudio/static:/app/static
#    depends_on:
#      - auth-service
#    env_file:
#      - api.env
#
#  auth-service:
#    image: deadmolesstudio/ketnipz-auth-service
#    container_name: auth-service
#    env_file:
#      - auth.env
#
#  game-service:
#    image: deadmolesstudio/ketnipz-game-service
#    container_name: game-service
#    depends_on:
#      - auth-service
#    env_file:
#      - game.env
#
#  chat-service:
#    image: deadmolesstudio/ketnipz-chat-service
#    container_name: chat-service
#    depends_on:
#      - auth-service
#    env_file:
#      - chat.env
#
#  prometheus:
#    image: quay.io/prometheus/prometheus
#    container_name: prometheus
#    volumes:
#      - "./prometheus:/etc/prometheus/"
#      - prometheus_data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#
#  node_exporter:
#    image: quay.io/prometheus/node-exporter
#    container_name: node_exporter
#    user: root
#    privileged: true
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
#
#  grafana:
#    image: grafana/grafana
#    container_name: grafana
#    volumes:
#      - grafana_data:/var/lib/grafana
#      - ${PWD}/grafana/grafana.ini:/etc/grafana/grafana.ini
#    environment:
#      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
#      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
#      - GF_USERS_ALLOW_SIGN_UP=false
#
#volumes:
#  prometheus_data:
#  grafana_data:
#
## external network with nginx, databases
#networks:
#  default:
#    external:
#      name: ketnipz-net
#
#
#
#
#
#///////


version: "3"

services:

  postgres:
    image: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: docker
    ports:
      - 5432:5432
    volumes:
      - $HOME/docker/volumes/postgres:/var/lib/postgresql/data  postgres

  redis_db:
    image: redis
    command: redis-server --requirepass docker
    environment:
      REDIS_DB: redis
      REDIS_USER: redis
      REDIS_PASSWORD: docker
    ports:
      - 6379:6379
    volumes:
      - $HOME/docker/volumes/redis:/var/lib/redissql/data  redis

  main:
    build: .
#    restart: always
    depends_on:
      - session_service
      - comments_service
    ports:
      - 8080:8080
    links:
      - session_service
      - comments_service

  session_service:
    build:
      context: .
      dockerfile: ./session_microservice/Dockerfile.session
#    restart: always
    depends_on:
      - redis_db
    ports:
      - 8081:8081
    links:
      - redis_db

  comments_service:
    build:
      context: .
      dockerfile: ./comments_microservice/Dockerfile.comments
    #    restart: always
    depends_on:
      - postgres
    ports:
      - 8082:8082
    links:
      - postgres


# external network with nginx, databases
networks:
  default:
    driver: bridge
