// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson14b8084aDecodeKinoBackendModels(in *jlexer.Lexer, out *Vote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vote_id":
			out.VoteID = uint(in.Uint())
		case "film_id":
			out.MovieID = uint(in.Uint())
		case "user_id":
			out.UserID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels(out *jwriter.Writer, in Vote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vote_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.VoteID))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.MovieID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels1(in *jlexer.Lexer, out *RequestProfileFilm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reqidfilm":
			out.ID = uint(in.Uint())
		case "reqtitle":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels1(out *jwriter.Writer, in RequestProfileFilm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reqidfilm\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"reqtitle\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestProfileFilm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestProfileFilm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestProfileFilm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestProfileFilm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels1(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels2(in *jlexer.Lexer, out *RequestFilmTimes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ms_id":
			out.MovieSessionID = uint(in.Uint())
		case "start_datetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "hall_name":
			out.Hall = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels2(out *jwriter.Writer, in RequestFilmTimes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ms_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.MovieSessionID))
	}
	{
		const prefix string = ",\"start_datetime\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"hall_name\":"
		out.RawString(prefix)
		out.String(string(in.Hall))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestFilmTimes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestFilmTimes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestFilmTimes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestFilmTimes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels2(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels3(in *jlexer.Lexer, out *RegisterVote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "film_id":
			out.MovieID = uint(in.Uint())
		case "user_id":
			out.UserID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels3(out *jwriter.Writer, in RegisterVote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.MovieID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegisterVote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisterVote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegisterVote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisterVote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels3(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels4(in *jlexer.Lexer, out *RegisterProfileFilm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "avatar":
			if in.IsNull() {
				in.Skip()
				out.Avatar = nil
			} else {
				if out.Avatar == nil {
					out.Avatar = new(string)
				}
				*out.Avatar = string(in.String())
			}
		case "director":
			out.Director = string(in.String())
		case "mainactor":
			out.MainActor = string(in.String())
		case "admin_id":
			out.AdminID = uint(in.Uint())
		case "genre":
			out.Genre = string(in.String())
		case "length":
			out.Length = int(in.Int())
		case "production":
			out.Production = string(in.String())
		case "year":
			out.Year = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels4(out *jwriter.Writer, in RegisterProfileFilm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.Avatar != nil {
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(*in.Avatar))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"mainactor\":"
		out.RawString(prefix)
		out.String(string(in.MainActor))
	}
	{
		const prefix string = ",\"admin_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.AdminID))
	}
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix)
		out.String(string(in.Genre))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Int(int(in.Length))
	}
	{
		const prefix string = ",\"production\":"
		out.RawString(prefix)
		out.String(string(in.Production))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegisterProfileFilm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisterProfileFilm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegisterProfileFilm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisterProfileFilm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels4(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels5(in *jlexer.Lexer, out *RegisterMovieSession) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hall_name":
			out.HallName = string(in.String())
		case "movie_id":
			out.MovieID = uint(in.Uint())
		case "start_datetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels5(out *jwriter.Writer, in RegisterMovieSession) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hall_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.HallName))
	}
	{
		const prefix string = ",\"movie_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.MovieID))
	}
	{
		const prefix string = ",\"start_datetime\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegisterMovieSession) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegisterMovieSession) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegisterMovieSession) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegisterMovieSession) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels5(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels6(in *jlexer.Lexer, out *ProfileFilmWithVote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_voted":
			out.IsVoted = bool(in.Bool())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "avatar":
			if in.IsNull() {
				in.Skip()
				out.Avatar = nil
			} else {
				if out.Avatar == nil {
					out.Avatar = new(string)
				}
				*out.Avatar = string(in.String())
			}
		case "director":
			out.Director = string(in.String())
		case "mainactor":
			out.MainActor = string(in.String())
		case "admin_id":
			out.AdminID = uint(in.Uint())
		case "genre":
			out.Genre = string(in.String())
		case "length":
			out.Length = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "production":
			out.Production = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "poster_popup":
			out.PosterPopup = string(in.String())
		case "trailer":
			out.Trailer = string(in.String())
		case "year":
			out.Year = int(in.Int())
		case "id":
			out.FilmID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels6(out *jwriter.Writer, in ProfileFilmWithVote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_voted\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsVoted))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.Avatar != nil {
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(*in.Avatar))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"mainactor\":"
		out.RawString(prefix)
		out.String(string(in.MainActor))
	}
	{
		const prefix string = ",\"admin_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.AdminID))
	}
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix)
		out.String(string(in.Genre))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Int(int(in.Length))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"production\":"
		out.RawString(prefix)
		out.String(string(in.Production))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"poster_popup\":"
		out.RawString(prefix)
		out.String(string(in.PosterPopup))
	}
	{
		const prefix string = ",\"trailer\":"
		out.RawString(prefix)
		out.String(string(in.Trailer))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint(uint(in.FilmID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileFilmWithVote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileFilmWithVote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileFilmWithVote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileFilmWithVote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels6(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels7(in *jlexer.Lexer, out *ProfileFilmErrorList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make([]ProfileError, 0, 2)
					} else {
						out.Errors = []ProfileError{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ProfileError
					(v1).UnmarshalEasyJSON(in)
					out.Errors = append(out.Errors, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels7(out *jwriter.Writer, in ProfileFilmErrorList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		if in.Errors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Errors {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileFilmErrorList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileFilmErrorList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileFilmErrorList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileFilmErrorList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels7(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels8(in *jlexer.Lexer, out *ProfileFilmError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			out.Field = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels8(out *jwriter.Writer, in ProfileFilmError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.String(string(in.Field))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileFilmError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileFilmError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileFilmError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileFilmError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels8(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels9(in *jlexer.Lexer, out *ProfileFilm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "avatar":
			if in.IsNull() {
				in.Skip()
				out.Avatar = nil
			} else {
				if out.Avatar == nil {
					out.Avatar = new(string)
				}
				*out.Avatar = string(in.String())
			}
		case "director":
			out.Director = string(in.String())
		case "mainactor":
			out.MainActor = string(in.String())
		case "admin_id":
			out.AdminID = uint(in.Uint())
		case "genre":
			out.Genre = string(in.String())
		case "length":
			out.Length = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "production":
			out.Production = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "poster_popup":
			out.PosterPopup = string(in.String())
		case "trailer":
			out.Trailer = string(in.String())
		case "year":
			out.Year = int(in.Int())
		case "id":
			out.FilmID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels9(out *jwriter.Writer, in ProfileFilm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.Avatar != nil {
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(*in.Avatar))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"mainactor\":"
		out.RawString(prefix)
		out.String(string(in.MainActor))
	}
	{
		const prefix string = ",\"admin_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.AdminID))
	}
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix)
		out.String(string(in.Genre))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Int(int(in.Length))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	{
		const prefix string = ",\"production\":"
		out.RawString(prefix)
		out.String(string(in.Production))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"poster_popup\":"
		out.RawString(prefix)
		out.String(string(in.PosterPopup))
	}
	{
		const prefix string = ",\"trailer\":"
		out.RawString(prefix)
		out.String(string(in.Trailer))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Uint(uint(in.FilmID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileFilm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileFilm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileFilm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileFilm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels9(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels10(in *jlexer.Lexer, out *MovieSessionSeat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ms_id":
			out.MsID = uint(in.Uint())
		case "hall_name":
			out.HallName = string(in.String())
		case "movie_id":
			out.MovieID = uint(in.Uint())
		case "start_datetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "type":
			out.Type = string(in.String())
		case "seat_id":
			out.SeatID = uint(in.Uint())
		case "movie_session_id":
			out.MovieSessionID = int(in.Int())
		case "is_taken":
			out.IsTaken = bool(in.Bool())
		case "price":
			out.Price = uint(in.Uint())
		case "row":
			out.Row = int(in.Int())
		case "seat_number":
			out.SeatNumber = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels10(out *jwriter.Writer, in MovieSessionSeat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ms_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.MsID))
	}
	{
		const prefix string = ",\"hall_name\":"
		out.RawString(prefix)
		out.String(string(in.HallName))
	}
	{
		const prefix string = ",\"movie_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.MovieID))
	}
	{
		const prefix string = ",\"start_datetime\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"seat_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.SeatID))
	}
	{
		const prefix string = ",\"movie_session_id\":"
		out.RawString(prefix)
		out.Int(int(in.MovieSessionID))
	}
	{
		const prefix string = ",\"is_taken\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTaken))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Uint(uint(in.Price))
	}
	{
		const prefix string = ",\"row\":"
		out.RawString(prefix)
		out.Int(int(in.Row))
	}
	{
		const prefix string = ",\"seat_number\":"
		out.RawString(prefix)
		out.Int(int(in.SeatNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MovieSessionSeat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieSessionSeat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovieSessionSeat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieSessionSeat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels10(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels11(in *jlexer.Lexer, out *MovieSession) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ms_id":
			out.MsID = uint(in.Uint())
		case "hall_name":
			out.HallName = string(in.String())
		case "movie_id":
			out.MovieID = uint(in.Uint())
		case "start_datetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels11(out *jwriter.Writer, in MovieSession) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ms_id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.MsID))
	}
	{
		const prefix string = ",\"hall_name\":"
		out.RawString(prefix)
		out.String(string(in.HallName))
	}
	{
		const prefix string = ",\"movie_id\":"
		out.RawString(prefix)
		out.Uint(uint(in.MovieID))
	}
	{
		const prefix string = ",\"start_datetime\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MovieSession) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieSession) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MovieSession) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieSession) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels11(l, v)
}
func easyjson14b8084aDecodeKinoBackendModels12(in *jlexer.Lexer, out *Film) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.FilmID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson14b8084aEncodeKinoBackendModels12(out *jwriter.Writer, in Film) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.FilmID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Film) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson14b8084aEncodeKinoBackendModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Film) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson14b8084aEncodeKinoBackendModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Film) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson14b8084aDecodeKinoBackendModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Film) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson14b8084aDecodeKinoBackendModels12(l, v)
}
