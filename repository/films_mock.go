// Code generated by MockGen. DO NOT EDIT.
// Source: kino_backend/repository (interfaces: FilmsRepository)

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	models "kino_backend/models"
	reflect "reflect"
)

// MockFilmsRepository is a mock of FilmsRepository interface
type MockFilmsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsRepositoryMockRecorder
}

// MockFilmsRepositoryMockRecorder is the mock recorder for MockFilmsRepository
type MockFilmsRepositoryMockRecorder struct {
	mock *MockFilmsRepository
}

// NewMockFilmsRepository creates a new mock instance
func NewMockFilmsRepository(ctrl *gomock.Controller) *MockFilmsRepository {
	mock := &MockFilmsRepository{ctrl: ctrl}
	mock.recorder = &MockFilmsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilmsRepository) EXPECT() *MockFilmsRepositoryMockRecorder {
	return m.recorder
}

// CheckExistenceOfTitle mocks base method
func (m *MockFilmsRepository) CheckExistenceOfTitle(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistenceOfTitle", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistenceOfTitle indicates an expected call of CheckExistenceOfTitle
func (mr *MockFilmsRepositoryMockRecorder) CheckExistenceOfTitle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistenceOfTitle", reflect.TypeOf((*MockFilmsRepository)(nil).CheckExistenceOfTitle), arg0)
}

// CreateNewFilm mocks base method
func (m *MockFilmsRepository) CreateNewFilm(arg0 *models.RegisterProfileFilm) (models.ProfileFilm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewFilm", arg0)
	ret0, _ := ret[0].(models.ProfileFilm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewFilm indicates an expected call of CreateNewFilm
func (mr *MockFilmsRepositoryMockRecorder) CreateNewFilm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewFilm", reflect.TypeOf((*MockFilmsRepository)(nil).CreateNewFilm), arg0)
}

// DeleteAvatarFilm mocks base method
func (m *MockFilmsRepository) DeleteAvatarFilm(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAvatarFilm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAvatarFilm indicates an expected call of DeleteAvatarFilm
func (mr *MockFilmsRepositoryMockRecorder) DeleteAvatarFilm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAvatarFilm", reflect.TypeOf((*MockFilmsRepository)(nil).DeleteAvatarFilm), arg0)
}

// GetCountOfFilms mocks base method
func (m *MockFilmsRepository) GetCountOfFilms() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountOfFilms")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountOfFilms indicates an expected call of GetCountOfFilms
func (mr *MockFilmsRepositoryMockRecorder) GetCountOfFilms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountOfFilms", reflect.TypeOf((*MockFilmsRepository)(nil).GetCountOfFilms))
}

// GetFilmProfileByID mocks base method
func (m *MockFilmsRepository) GetFilmProfileByID(arg0 uint) (models.ProfileFilm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmProfileByID", arg0)
	ret0, _ := ret[0].(models.ProfileFilm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmProfileByID indicates an expected call of GetFilmProfileByID
func (mr *MockFilmsRepositoryMockRecorder) GetFilmProfileByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmProfileByID", reflect.TypeOf((*MockFilmsRepository)(nil).GetFilmProfileByID), arg0)
}

// GetFilmProfileByTitle mocks base method
func (m *MockFilmsRepository) GetFilmProfileByTitle(arg0 string) (models.ProfileFilm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmProfileByTitle", arg0)
	ret0, _ := ret[0].(models.ProfileFilm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmProfileByTitle indicates an expected call of GetFilmProfileByTitle
func (mr *MockFilmsRepositoryMockRecorder) GetFilmProfileByTitle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmProfileByTitle", reflect.TypeOf((*MockFilmsRepository)(nil).GetFilmProfileByTitle), arg0)
}

// UpdateFilmByID mocks base method
func (m *MockFilmsRepository) UpdateFilmByID(arg0 uint, arg1 *models.ProfileFilm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilmByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilmByID indicates an expected call of UpdateFilmByID
func (mr *MockFilmsRepositoryMockRecorder) UpdateFilmByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilmByID", reflect.TypeOf((*MockFilmsRepository)(nil).UpdateFilmByID), arg0, arg1)
}

// UploadAvatarFilm mocks base method
func (m *MockFilmsRepository) UploadAvatarFilm(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatarFilm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatarFilm indicates an expected call of UploadAvatarFilm
func (mr *MockFilmsRepositoryMockRecorder) UploadAvatarFilm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatarFilm", reflect.TypeOf((*MockFilmsRepository)(nil).UploadAvatarFilm), arg0, arg1)
}
