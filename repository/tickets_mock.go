// Code generated by MockGen. DO NOT EDIT.
// Source: kino_backend/repository (interfaces: TicketsRepository)

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	models "kino_backend/models"
	reflect "reflect"
)

// MockTicketsRepository is a mock of TicketsRepository interface
type MockTicketsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTicketsRepositoryMockRecorder
}

// MockTicketsRepositoryMockRecorder is the mock recorder for MockTicketsRepository
type MockTicketsRepositoryMockRecorder struct {
	mock *MockTicketsRepository
}

// NewMockTicketsRepository creates a new mock instance
func NewMockTicketsRepository(ctrl *gomock.Controller) *MockTicketsRepository {
	mock := &MockTicketsRepository{ctrl: ctrl}
	mock.recorder = &MockTicketsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTicketsRepository) EXPECT() *MockTicketsRepositoryMockRecorder {
	return m.recorder
}

// CheckExistenceOfTicket mocks base method
func (m *MockTicketsRepository) CheckExistenceOfTicket(arg0 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistenceOfTicket", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistenceOfTicket indicates an expected call of CheckExistenceOfTicket
func (mr *MockTicketsRepositoryMockRecorder) CheckExistenceOfTicket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistenceOfTicket", reflect.TypeOf((*MockTicketsRepository)(nil).CheckExistenceOfTicket), arg0)
}

// CreateNewTicket mocks base method
func (m *MockTicketsRepository) CreateNewTicket(arg0 *models.RegisterTicket) (models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTicket", arg0)
	ret0, _ := ret[0].(models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewTicket indicates an expected call of CreateNewTicket
func (mr *MockTicketsRepositoryMockRecorder) CreateNewTicket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTicket", reflect.TypeOf((*MockTicketsRepository)(nil).CreateNewTicket), arg0)
}

// GetTicketProfileByID mocks base method
func (m *MockTicketsRepository) GetTicketProfileByID(arg0 uint) (models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketProfileByID", arg0)
	ret0, _ := ret[0].(models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketProfileByID indicates an expected call of GetTicketProfileByID
func (mr *MockTicketsRepositoryMockRecorder) GetTicketProfileByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketProfileByID", reflect.TypeOf((*MockTicketsRepository)(nil).GetTicketProfileByID), arg0)
}
