// Code generated by MockGen. DO NOT EDIT.
// Source: kino_backend/repository (interfaces: SessionsRepository)

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSessionsRepository is a mock of SessionsRepository interface
type MockSessionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsRepositoryMockRecorder
}

// MockSessionsRepositoryMockRecorder is the mock recorder for MockSessionsRepository
type MockSessionsRepositoryMockRecorder struct {
	mock *MockSessionsRepository
}

// NewMockSessionsRepository creates a new mock instance
func NewMockSessionsRepository(ctrl *gomock.Controller) *MockSessionsRepository {
	mock := &MockSessionsRepository{ctrl: ctrl}
	mock.recorder = &MockSessionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionsRepository) EXPECT() *MockSessionsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessionsRepository) Create(arg0 string, arg1 uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionsRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionsRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockSessionsRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSessionsRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionsRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockSessionsRepository) Get(arg0 context.Context, arg1 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSessionsRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionsRepository)(nil).Get), arg0, arg1)
}
