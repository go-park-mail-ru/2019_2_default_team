// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comments.proto

package comments_microservice_client

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Comment struct {
	Username             string   `protobuf:"bytes,1,opt,name=Username,proto3" json:"Username,omitempty"  db:"username"`
	FilmTitle            string   `protobuf:"bytes,2,opt,name=FilmTitle,proto3" json:"FilmTitle,omitempty"  db:"film_title"`
	Text                 string   `protobuf:"bytes,3,opt,name=Text,proto3" json:"Text,omitempty"  db:"comment"`
	ID                   uint64   `protobuf:"varint,4,opt,name=ID,proto3" json:"ID,omitempty"  db:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_c79ba7e4af40529a, []int{0}
}

func (m *Comment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Comment.Unmarshal(m, b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return xxx_messageInfo_Comment.Size(m)
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Comment) GetFilmTitle() string {
	if m != nil {
		return m.FilmTitle
	}
	return ""
}

func (m *Comment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Comment) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type CommentsResponse struct {
	Comments             []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CommentsResponse) Reset()         { *m = CommentsResponse{} }
func (m *CommentsResponse) String() string { return proto.CompactTextString(m) }
func (*CommentsResponse) ProtoMessage()    {}
func (*CommentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c79ba7e4af40529a, []int{1}
}

func (m *CommentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentsResponse.Unmarshal(m, b)
}
func (m *CommentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentsResponse.Marshal(b, m, deterministic)
}
func (m *CommentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentsResponse.Merge(m, src)
}
func (m *CommentsResponse) XXX_Size() int {
	return xxx_messageInfo_CommentsResponse.Size(m)
}
func (m *CommentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommentsResponse proto.InternalMessageInfo

func (m *CommentsResponse) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type CommentID struct {
	Film                 string   `protobuf:"bytes,1,opt,name=Film,proto3" json:"Film,omitempty"  db:"film_title"`
	User                 string   `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"  db:"username"`
	CID                  uint64   `protobuf:"varint,3,opt,name=CID,proto3" json:"CID,omitempty"  db:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentID) Reset()         { *m = CommentID{} }
func (m *CommentID) String() string { return proto.CompactTextString(m) }
func (*CommentID) ProtoMessage()    {}
func (*CommentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c79ba7e4af40529a, []int{2}
}

func (m *CommentID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentID.Unmarshal(m, b)
}
func (m *CommentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentID.Marshal(b, m, deterministic)
}
func (m *CommentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentID.Merge(m, src)
}
func (m *CommentID) XXX_Size() int {
	return xxx_messageInfo_CommentID.Size(m)
}
func (m *CommentID) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentID.DiscardUnknown(m)
}

var xxx_messageInfo_CommentID proto.InternalMessageInfo

func (m *CommentID) GetFilm() string {
	if m != nil {
		return m.Film
	}
	return ""
}

func (m *CommentID) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CommentID) GetCID() uint64 {
	if m != nil {
		return m.CID
	}
	return 0
}

type Nothing struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nothing) Reset()         { *m = Nothing{} }
func (m *Nothing) String() string { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()    {}
func (*Nothing) Descriptor() ([]byte, []int) {
	return fileDescriptor_c79ba7e4af40529a, []int{3}
}

func (m *Nothing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nothing.Unmarshal(m, b)
}
func (m *Nothing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nothing.Marshal(b, m, deterministic)
}
func (m *Nothing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nothing.Merge(m, src)
}
func (m *Nothing) XXX_Size() int {
	return xxx_messageInfo_Nothing.Size(m)
}
func (m *Nothing) XXX_DiscardUnknown() {
	xxx_messageInfo_Nothing.DiscardUnknown(m)
}

var xxx_messageInfo_Nothing proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Comment)(nil), "comments_microservice_client.Comment")
	proto.RegisterType((*CommentsResponse)(nil), "comments_microservice_client.CommentsResponse")
	proto.RegisterType((*CommentID)(nil), "comments_microservice_client.CommentID")
	proto.RegisterType((*Nothing)(nil), "comments_microservice_client.Nothing")
}

func init() { proto.RegisterFile("comments.proto", fileDescriptor_c79ba7e4af40529a) }

var fileDescriptor_c79ba7e4af40529a = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x9b, 0x36, 0xa2, 0xcd, 0xa1, 0x96, 0xca, 0x2c, 0x51, 0xd5, 0xa1, 0xb2, 0x84, 0xe8,
	0x94, 0xa1, 0x3c, 0x01, 0xd4, 0x80, 0x3c, 0xc0, 0x10, 0xb5, 0x2b, 0x55, 0x88, 0x4e, 0xc5, 0x52,
	0x62, 0x57, 0xb6, 0x85, 0xe0, 0x51, 0x78, 0x5b, 0x64, 0xe3, 0xa4, 0x0b, 0x82, 0x0c, 0xb0, 0x9d,
	0xef, 0x9c, 0xff, 0xff, 0xf2, 0x9f, 0x0c, 0x93, 0x52, 0xd5, 0x35, 0x4a, 0x6b, 0xb2, 0x83, 0x56,
	0x56, 0x91, 0x79, 0x73, 0xde, 0xd5, 0xa2, 0xd4, 0xca, 0xa0, 0x7e, 0x15, 0x25, 0xee, 0xca, 0x4a,
	0xa0, 0xb4, 0x74, 0x0f, 0xc3, 0xf5, 0xd7, 0x9c, 0xcc, 0x60, 0xb4, 0x35, 0xa8, 0x65, 0x51, 0x63,
	0x1a, 0x2d, 0xa2, 0x65, 0x92, 0xb7, 0x67, 0x32, 0x87, 0xe4, 0x4e, 0x54, 0xf5, 0x46, 0xd8, 0x0a,
	0xd3, 0xbe, 0x1f, 0x1e, 0x1b, 0x84, 0x40, 0xbc, 0xc1, 0x37, 0x9b, 0x0e, 0xfc, 0xc0, 0xd7, 0x64,
	0x02, 0x7d, 0xce, 0xd2, 0x78, 0x11, 0x2d, 0xe3, 0xbc, 0xcf, 0x19, 0xdd, 0xc2, 0x34, 0x18, 0x99,
	0x1c, 0xcd, 0x41, 0x49, 0x83, 0xe4, 0x1a, 0x46, 0x0d, 0x5c, 0x1a, 0x2d, 0x06, 0xcb, 0xd3, 0xd5,
	0x45, 0xf6, 0x13, 0x6d, 0x16, 0x14, 0xf2, 0xf6, 0x33, 0x7a, 0x0b, 0x49, 0x68, 0x72, 0xe6, 0x38,
	0x1c, 0x54, 0xa0, 0xf7, 0xb5, 0xeb, 0xb9, 0xbf, 0x08, 0xd0, 0xbe, 0x26, 0x53, 0x18, 0xac, 0x39,
	0xf3, 0xb8, 0x71, 0xee, 0x4a, 0x9a, 0xc0, 0xf0, 0x51, 0xd9, 0x17, 0x21, 0xf7, 0xab, 0x8f, 0x18,
	0xce, 0x1a, 0xd2, 0x87, 0x42, 0x16, 0x7b, 0xd4, 0x64, 0x07, 0xe3, 0xb5, 0xc6, 0xc2, 0x62, 0x93,
	0x55, 0x37, 0xce, 0xd9, 0x2f, 0xd7, 0x82, 0x25, 0xed, 0x91, 0x27, 0x80, 0x7b, 0xb4, 0x8d, 0xfa,
	0x65, 0x27, 0x75, 0xce, 0x66, 0xdd, 0x30, 0x68, 0x8f, 0x1c, 0xe0, 0xfc, 0xa8, 0x6f, 0x6e, 0xde,
	0x5d, 0x34, 0x9c, 0x75, 0x37, 0xca, 0x3a, 0x5d, 0x6c, 0x37, 0xfb, 0x8d, 0xa3, 0x0b, 0xfe, 0x7f,
	0x1d, 0x0b, 0x18, 0x33, 0xac, 0xf0, 0xb8, 0xa4, 0xbf, 0x8a, 0xb1, 0x5d, 0xd3, 0xf3, 0x89, 0x7f,
	0x52, 0x57, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xf2, 0xb7, 0xdc, 0x64, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentsManagerClient is the client API for CommentsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentsManagerClient interface {
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Nothing, error)
	GetComment(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*Comment, error)
	GetCommentsByFilmID(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*CommentsResponse, error)
	GetCommentsByUserID(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*CommentsResponse, error)
	DeleteComment(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*Nothing, error)
}

type commentsManagerClient struct {
	cc *grpc.ClientConn
}

func NewCommentsManagerClient(cc *grpc.ClientConn) CommentsManagerClient {
	return &commentsManagerClient{cc}
}

func (c *commentsManagerClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/comments_microservice_client.CommentsManager/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsManagerClient) GetComment(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/comments_microservice_client.CommentsManager/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsManagerClient) GetCommentsByFilmID(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*CommentsResponse, error) {
	out := new(CommentsResponse)
	err := c.cc.Invoke(ctx, "/comments_microservice_client.CommentsManager/GetCommentsByFilmID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsManagerClient) GetCommentsByUserID(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*CommentsResponse, error) {
	out := new(CommentsResponse)
	err := c.cc.Invoke(ctx, "/comments_microservice_client.CommentsManager/GetCommentsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsManagerClient) DeleteComment(ctx context.Context, in *CommentID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/comments_microservice_client.CommentsManager/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsManagerServer is the server API for CommentsManager service.
type CommentsManagerServer interface {
	CreateComment(context.Context, *Comment) (*Nothing, error)
	GetComment(context.Context, *CommentID) (*Comment, error)
	GetCommentsByFilmID(context.Context, *CommentID) (*CommentsResponse, error)
	GetCommentsByUserID(context.Context, *CommentID) (*CommentsResponse, error)
	DeleteComment(context.Context, *CommentID) (*Nothing, error)
}

// UnimplementedCommentsManagerServer can be embedded to have forward compatible implementations.
type UnimplementedCommentsManagerServer struct {
}

func (*UnimplementedCommentsManagerServer) CreateComment(ctx context.Context, req *Comment) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (*UnimplementedCommentsManagerServer) GetComment(ctx context.Context, req *CommentID) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (*UnimplementedCommentsManagerServer) GetCommentsByFilmID(ctx context.Context, req *CommentID) (*CommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByFilmID not implemented")
}
func (*UnimplementedCommentsManagerServer) GetCommentsByUserID(ctx context.Context, req *CommentID) (*CommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByUserID not implemented")
}
func (*UnimplementedCommentsManagerServer) DeleteComment(ctx context.Context, req *CommentID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}

func RegisterCommentsManagerServer(s *grpc.Server, srv CommentsManagerServer) {
	s.RegisterService(&_CommentsManager_serviceDesc, srv)
}

func _CommentsManager_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments_microservice_client.CommentsManager/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsManager_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments_microservice_client.CommentsManager/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).GetComment(ctx, req.(*CommentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsManager_GetCommentsByFilmID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).GetCommentsByFilmID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments_microservice_client.CommentsManager/GetCommentsByFilmID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).GetCommentsByFilmID(ctx, req.(*CommentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsManager_GetCommentsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).GetCommentsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments_microservice_client.CommentsManager/GetCommentsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).GetCommentsByUserID(ctx, req.(*CommentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsManager_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsManagerServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments_microservice_client.CommentsManager/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsManagerServer).DeleteComment(ctx, req.(*CommentID))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentsManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comments_microservice_client.CommentsManager",
	HandlerType: (*CommentsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentsManager_CreateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _CommentsManager_GetComment_Handler,
		},
		{
			MethodName: "GetCommentsByFilmID",
			Handler:    _CommentsManager_GetCommentsByFilmID_Handler,
		},
		{
			MethodName: "GetCommentsByUserID",
			Handler:    _CommentsManager_GetCommentsByUserID_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentsManager_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comments.proto",
}
